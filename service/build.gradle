buildscript {
  repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://repo.grails.org/grails/plugins" }
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
    classpath "org.grails.plugins:hibernate5:7.3.0"
    classpath "org.grails.plugins:views-gradle:2.3.2"
    classpath 'com.bmuschko:gradle-docker-plugin:6.6.1'
    classpath 'org.grails.plugins:database-migration:3.1.0'
  }
}


final String version_regex = /^(((\d+)\.\d+)\.\d+)(-([a-zA-Z]+(\.\d+)?))?$/
Map<String, String> env = System.getenv();
String calculated_version = null;

if ( ( appVersion.contains('SNAPSHOT') ) && ( env.BUILD_NUMBER != null ) ) {
  println("Detected snapshot version and build number - appending");
  calculated_version = "${appVersion}.${env.BUILD_NUMBER}".toString()
}
else {
  println("Release version");
  calculated_version = "${appVersion}".toString()
}

version "${calculated_version}"
group "org.olf"

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.grails.grails-web'
apply plugin: 'org.grails.plugins.views-json'
apply plugin: 'com.bmuschko.docker-remote-api'

sourceSets {
  main {
    resources {
      srcDir 'grails-app/migrations'
      srcDir 'src/main/okapi/tenant'
    }
  }
}

// https://github.com/grails/grails-core/issues/12181
bootJar {
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

eclipse {
  classpath {
    file {
      whenMerged {
        def confEntries = (entries.findAll { it.path == 'grails-app/conf' }) as List
        
        if (confEntries) {
          def singleEnty = confEntries[0]
          
          // Remove all the entries.
          entries.removeAll ( confEntries )
          
          // Set the output directory, and re-add.
          singleEnty.output = "bin/main"
          entries << singleEnty
        }
      }
    }
  }
}

repositories {
        //mavenLocal()
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://repo.grails.org/grails/plugins" }
        maven { url "https://jitpack.io" }
        maven { url 'https://maven.indexdata.com/' }
        maven { url "https://maven.k-int.com/repository/releases" }
}

configurations {
        developmentOnly
        runtimeClasspath {
                extendsFrom developmentOnly
        }
} 



dependencies {
        compileOnly "io.micronaut:micronaut-inject-groovy"
        console "org.grails:grails-console"
        implementation "org.springframework.boot:spring-boot-starter-logging"
        //implementation "org.springframework.boot:spring-boot-starter-validation"
        implementation "org.springframework.boot:spring-boot-autoconfigure"
        implementation "org.grails:grails-core"
        implementation "org.springframework.boot:spring-boot-starter-actuator"
        //implementation "org.springframework.boot:spring-boot-starter-tomcat"
        implementation "org.grails:grails-plugin-url-mappings"
        implementation "org.grails:grails-plugin-rest"
        implementation "org.grails:grails-plugin-codecs"
        implementation "org.grails:grails-plugin-interceptors"
        implementation "org.grails:grails-plugin-services"
        implementation "org.grails:grails-plugin-datasource"
        implementation "org.grails:grails-plugin-databinding"
        implementation "org.grails:grails-web-boot"
        implementation "org.grails:grails-logging"
        //implementation "org.grails.plugins:cache"
        implementation "org.grails.plugins:async"
        implementation "org.grails.plugins:hibernate5"
        implementation "org.hibernate:hibernate-core:5.6.11.Final"
        implementation "org.grails.plugins:events"
        implementation "org.grails.plugins:views-json"
        implementation "org.grails.plugins:views-json-templates"
        profile "org.grails.profiles:rest-api"
        //runtimeOnly "org.glassfish.web:el-impl:2.2.1-b05"
        //runtimeOnly "com.h2database:h2"
        //runtimeOnly "org.apache.tomcat:tomcat-jdbc"
        runtimeOnly "javax.xml.bind:jaxb-api:2.3.1"
        testImplementation "io.micronaut:micronaut-inject-groovy"
        testImplementation "org.grails:grails-gorm-testing-support"
        testImplementation "org.mockito:mockito-core"
        //testImplementation "io.micronaut:micronaut-http-client"
        testImplementation "org.grails:grails-web-testing-support"
        //testImplementation "org.grails:views-json-testing-support"
        //testImplementation "org.hibernate.validator:hibernate-validator:6.1.7.Final"

        /*  ---- Manually installed dependencies ---- */
        implementation 'org.grails.plugins:spring-security-core:5.2.1'

        implementation 'com.k_int.grails:web-toolkit-ce:8.1.0-rc.4'
        implementation 'com.k_int.okapi:grails-okapi:6.0.0-rc.4'

        implementation 'io.github.http-builder-ng:http-builder-ng-core:1.0.4'
        implementation 'org.codehaus.janino:janino:3.1.12'
        implementation "org.springframework.boot:spring-boot-starter-undertow" // Replaces spring-boot-starter-tomcat
        implementation "org.hibernate:hibernate-java8:5.4.28.Final"
        runtimeOnly "com.zaxxer:HikariCP:3.4.5"                             // Replaces Tomcat JDBC pool
        runtimeOnly "org.postgresql:postgresql:42.5.3"
        implementation ('org.grails.plugins:database-migration:4.2.0') {
                exclude group: 'org.liquibase', module: 'liquibase-core'
        }
        implementation 'org.liquibase:liquibase-core:4.17.2'


        implementation 'com.opencsv:opencsv:5.7.1'
        implementation 'commons-io:commons-io:2.6'

        implementation 'uk.co.cacoethes:groovy-handlebars-engine:0.2'
        implementation 'com.github.jknack:handlebars-helpers:4.3.1'
        implementation 'commons-fileupload:commons-fileupload:1.4'

        implementation 'com.github.zafarkhaja:java-semver:0.9.0'
        implementation 'org.z3950.zing:cql-java:1.13'
        /* Newer versions of ehcache are at org.ehcache:ehcache, but do not include NamedThreadFactory */
        implementation 'net.sf.ehcache:ehcache:2.10.9.2'
        /*  ---- Manually installed testing dependencies ---- */
        implementation "org.grails:grails-gorm-testing-support:2.6.1"
        implementation "org.grails:grails-web-testing-support:2.6.1"
        testImplementation "org.grails.plugins:geb"
        testImplementation "org.seleniumhq.selenium:selenium-remote-driver:3.14.0"
        testImplementation "org.seleniumhq.selenium:selenium-api:3.14.0"
        testImplementation "org.seleniumhq.selenium:selenium-support:3.14.0"
        implementation "org.seleniumhq.selenium:selenium-chrome-driver:3.14.0"
        implementation "org.seleniumhq.selenium:selenium-firefox-driver:3.14.0"

        // Better test reports.
        testImplementation( 'com.athaydes:spock-reports:2.3.2-groovy-3.0' ) {
                transitive = false // this avoids affecting your version of Groovy/Spock
        }

        // Bumping this manually to avoid potential security issue with spring-webmvc-5.3.25
        implementation 'org.springframework:spring-webmvc:5.3.28'


}

bootRun {
  ignoreExitValue true
  jvmArgs(
      '-Dspring.output.ansi.enabled=always',
      '-server',
      '-noverify',
      '-XX:TieredStopAtLevel=1',
      '-Xmx1024m')
  sourceResources sourceSets.main
  String springProfilesActive = 'spring.profiles.active'
  systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

task generateDescriptors(type: Copy) {

  dependsOn buildProperties

  File grailsBuildInfoFile = buildProperties.outputs.files.files.find { it.name == 'grails.build.info' }

  final def props = [:]

  if(!(grailsBuildInfoFile)) return // No need to continue if the file is not there

  doFirst {

    // Place the loading within a do first as the info file from the buildProperties
    // task will not be present until it is executed. This owuld cause a file not found
    // during task configureation otherwise.
    Properties properties = new Properties()

    // Read properties from the file
    grailsBuildInfoFile.withInputStream {
      properties.load(it)
    }

    // Need to parse multi-dimensional keys.
    ConfigSlurper cs = new ConfigSlurper()
    props.putAll(cs.parse(properties))
  }

  from ('./src/main/okapi') {
    include '*-template.json'
  }
  into './build/resources/main/okapi'
  filteringCharset = 'UTF-8'
  expand(props)
  rename { String fileName ->
    fileName.replace('-template', '')
  }
}

// Ian : removing this to make build compatible with FOLIO Jenkinsfile - hope it doesn't mess up our local CI/CD
// jar {
//   version "${version.replaceAll(version_regex, '$2')}"
// }

buildProperties.doLast {

  // Find the right file
  File grailsBuildInfoFile = it.outputs.files.files.find { it.name == 'grails.build.info' }

  if(!grailsBuildInfoFile) {
    System.err.println("Unable to locate grails.build.info");
    return // No need to continue if the file is not there
  }

  Properties properties = new Properties()

  // Read properties from the file
  grailsBuildInfoFile.withInputStream {
    properties.load(it)
  }

  // Load the app version
  String version = properties.getProperty('info.app.version')
  def versionParts
  if (version && (versionParts = version =~ version_regex)) {
    println("Version parts : ${versionParts[0]}");
    versionParts[0].with {
      properties.setProperty('info.app.majorVersion', it[3])
      properties.setProperty('info.app.minorVersion', it[2])
      properties.setProperty('info.app.patchVersion', it[1])

      if (it[5]) {
        properties.setProperty('info.app.testVersion', it[5])
      }

      println("version properties: ${properties}");
    }

    version.replaceAll(/^(((\d+)\.\d+)\.\d+)(-([\w]+))?$/ , '$1')
  }

  if(env.BUILD_NUMBER)
    properties.setProperty('build.number', env.BUILD_NUMBER)

  if ( env.GIT_REVISION )
    properties.setProperty('build.git.revision', env.GIT_REVISION)

  if ( env.GIT_BRANCH )
    properties.setProperty('build.git.branch', env.GIT_BRANCH)

  if (env.GIT_COMMIT)
    properties.setProperty('build.git.commit', env.GIT_COMMIT)

  // Add new properties from various sources
  properties.setProperty('build.time', new Date().format("yyyy-MM-dd HH:mm:ss"))

  properties.setProperty('build.host', InetAddress.localHost.hostName)

  // Get a System property
  properties.setProperty('build.java.version', System.getProperty('java.version'))

  // Write the properties back to the file
  grailsBuildInfoFile.withOutputStream {
    properties.store(it,null)
  }
}

processResources.dependsOn generateDescriptors


tasks.withType(GroovyCompile) {
        configure(groovyOptions) {
                forkOptions.jvmArgs = ['-Xmx1024m']
        }
}


tasks.withType(Test) {
  useJUnitPlatform()
  systemProperty "geb.env", System.getProperty('geb.env')
  systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
  systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
  systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}


/**
 * Docker build config.
 */
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

ext {
  dockerTag = "${project.dockerRepo}/${project.name}:${project.version}${dockerTagSuffix}"
  dockerBuildDir = mkdir("${buildDir}/docker")
}

task prepareDocker(type: Copy, dependsOn: assemble) {
  description = 'Copy files to build directory'
  group = 'Docker'

  from project.bootJar

  // from otherfileLoc

  into dockerBuildDir
}


task createDockerfile(type: Dockerfile, dependsOn: prepareDocker) {
  description = 'Create a Dockerfile file'
  group = 'Docker'

  destFile = project.file("${dockerBuildDir}/Dockerfile")

  from 'folioci/alpine-jre-openjdk17:latest'
  instruction 'LABEL maintainer="Knowledge Integration"'

  exposePort 8080

  // Copying straight into the default directory should be enough
  copyFile bootJar.archiveName, '/usr/verticles/application.jar'
}

task buildImage(type: DockerBuildImage, dependsOn: createDockerfile) {
  description = 'Create Docker image to run the Grails application'
  group = 'Docker'

  inputDir = file(dockerBuildDir)
  images.add(dockerTag)
}

tasks.named('bootJarMainClassName') { it.mustRunAfter(tasks.named('compileGsonViews')) }
tasks.named('compileIntegrationTestGroovy') { it.mustRunAfter(tasks.named('compileGsonViews')) }
tasks.named('test') { it.mustRunAfter(tasks.named('compileGsonViews')) }
tasks.named('integrationTest') { it.mustRunAfter(tasks.named('compileGsonViews')) }
tasks.named('mergeTestReports') { it.mustRunAfter(tasks.named('test')) }
tasks.named('compileTestGroovy') { it.mustRunAfter(tasks.named('compileGsonViews')) }
